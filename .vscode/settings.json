import pandas as pd
from textblob import TextBlob
import matplotlib.pyplot as plt
from datetime import datetime

# Load the dataset
file_path = "tripadvisor_20240830184151.csv"
try:
    data = pd.read_csv(file_path, encoding='utf-8', errors='ignore')
except FileNotFoundError:
    print("File not found. Please check the file path.")
    exit()
except pd.errors.ParserError as e:
    print(f"Error parsing the file: {e}")
    exit()

# Preprocessing: Clean and filter relevant columns
data = data[['Review Text', 'Rating']].dropna()
data['Review Text'] = data['Review Text'].str.strip()
data = data[data['Review Text'].str.len() > 10]  # Remove very short reviews

# Lexicon-Based Sentiment Analysis using TextBlob
def analyze_sentiment(text):
    try:
        analysis = TextBlob(text)
        return analysis.sentiment.polarity
    except Exception as e:
        print(f"Error analyzing sentiment for text: {text[:50]}... Error: {e}")
        return 0  # Default to neutral sentiment

data['TextBlob_Polarity'] = data['Review Text'].apply(analyze_sentiment)

# Manual Coding: Define sentiment based on rating
def manual_sentiment_label(rating):
    if rating >= 4:
        return "Positive"
    elif rating == 3:
        return "Neutral"
    else:
        return "Negative"

data['Manual_Sentiment'] = data['Rating'].apply(manual_sentiment_label)

# Compare Results
THRESHOLD_POSITIVE = 0.1
THRESHOLD_NEGATIVE = -0.1

def compare_sentiments(polarity):
    if polarity > THRESHOLD_POSITIVE:
        return "Positive"
    elif polarity < THRESHOLD_NEGATIVE:
        return "Negative"
    else:
        return "Neutral"

data['TextBlob_Sentiment'] = data['TextBlob_Polarity'].apply(compare_sentiments)

# Match/Mismatch Analysis
data['Comparison'] = data.apply(
    lambda row: "Match" if row['Manual_Sentiment'] == row['TextBlob_Sentiment'] else "Mismatch",
    axis=1
)

# Visualization: Compare distributions
comparison = data[['Manual_Sentiment', 'TextBlob_Sentiment']].value_counts().unstack()
comparison_percent = comparison.div(comparison.sum(axis=1), axis=0) * 100

ax = comparison_percent.plot(kind="bar", figsize=(10, 6), colormap="viridis")
plt.title("Comparison of Manual Coding vs TextBlob Sentiment Analysis", fontsize=14)
plt.xlabel("Sentiment Category", fontsize=12)
plt.ylabel("Percentage (%)", fontsize=12)
plt.xticks(rotation=0)
for container in ax.containers:
    ax.bar_label(container, fmt='%.1f%%')
plt.legend(title="Sentiment", fontsize=10)
plt.show()

# Save Results
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
output_path = f"sentiment_comparison_results_{timestamp}.csv"
summary_path = f"comparison_summary_{timestamp}.csv"

data.to_csv(output_path, index=False)
summary = data['Comparison'].value_counts()
summary.to_csv(summary_path)

print(f"Results saved to {output_path}")
print(f"Summary saved to {summary_path}")