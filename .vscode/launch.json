{
    "configurations": [
        {
            "type": "pydevd",
            "name": "PyDev Run File Template",
            "request": "run-file-template",
            "env": {},
            "args": []
        },
        {
            "command": "npm start",
            "name": "Run npm start",
            "request": "launch",
            "type": "node-terminal"
        },
        {
            "name": "Python Debugger: Python File",
            "type": "debugpy",
            "request": "launch",
            "program": "${file}"
        }
    ]
}import pandas as pd
from textblob import TextBlob
import matplotlib.pyplot as plt

# Load the dataset
file_path = "tripadvisor_20240830184151.csv"
data = pd.read_csv(file_path)

# Preprocessing: Clean and filter relevant columns
data = data[
    ['Review Text', 'Rating'
    ]
].dropna()
data['Review Text'
] = data['Review Text'
].str.strip()

# Lexicon-Based Sentiment Analysis using TextBlob
def analyze_sentiment(text):
    analysis = TextBlob(text)
    return analysis.sentiment.polarity  # Polarity ranges from -1 (negative) to 1 (positive)

data['TextBlob_Polarity'
] = data['Review Text'
].apply(analyze_sentiment)

# Manual Coding: Define sentiment based on rating
def manual_sentiment_label(rating):
    if rating >= 4:
        return "Positive"
    elif rating == 3:
        return "Neutral"
    else:
        return "Negative"

data['Manual_Sentiment'
] = data['Rating'
].apply(manual_sentiment_label)

# Compare Results
def compare_sentiments(polarity):
    if polarity > 0.1:
        return "Positive"
    elif polarity < -0.1:
        return "Negative"
    else:
        return "Neutral"

data['TextBlob_Sentiment'
] = data['TextBlob_Polarity'
].apply(compare_sentiments)

# Visualization: Compare distributions
comparison = data[
    ['Manual_Sentiment', 'TextBlob_Sentiment'
    ]
].value_counts().unstack()

comparison.plot(kind="bar", figsize=(10,
6))
plt.title("Comparison of Manual Coding vs TextBlob Sentiment Analysis")
plt.xlabel("Sentiment Category")
plt.ylabel("Frequency")
plt.show()

# Save results for further analysis
output_path = "sentiment_comparison_results.csv"
data.to_csv(output_path, index=False)
print(f"Results saved to {output_path}")